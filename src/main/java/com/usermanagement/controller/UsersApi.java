/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.usermanagement.controller;

import com.usermanagement.model.dto.UserCreate;
import com.usermanagement.model.dto.UserResponse;
import com.usermanagement.model.dto.UserUpdate;
import com.usermanagement.model.dto.UserUpdatePassword;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-06T20:29:17.437296100+02:00[Africa/Cairo]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "User Management", description = "the User Management API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /users : Create a new user
     *
     * @param userCreate Details of the new user to create (required)
     * @return User created successfully (status code 200)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create a new user",
        tags = { "User Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> createUser(
        @Parameter(name = "UserCreate", description = "Details of the new user to create", required = true) @Valid @RequestBody UserCreate userCreate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"User Added successfully.\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{id} : Delete a user by ID
     *
     * @param id The unique ID of the user (required)
     * @return User deleted successfully (status code 200)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete a user by ID",
        tags = { "User Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User deleted successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> deleteUser(
        @Parameter(name = "id", description = "The unique ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"User deleted successfully.\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users : Retrieve all users
     *
     * @return A list of all users (status code 200)
     */
    @Operation(
        operationId = "getAllUsers",
        summary = "Retrieve all users",
        tags = { "User Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of all users", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<UserResponse>> getAllUsers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"role\" : \"role\", \"gender\" : \"MALE\", \"mobileNumber\" : \"mobileNumber\", \"fullName\" : \"fullName\", \"id\" : 0, \"userName\" : \"userName\", \"email\" : \"email\", \"status\" : \"ACTIVE\" }, { \"role\" : \"role\", \"gender\" : \"MALE\", \"mobileNumber\" : \"mobileNumber\", \"fullName\" : \"fullName\", \"id\" : 0, \"userName\" : \"userName\", \"email\" : \"email\", \"status\" : \"ACTIVE\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{id} : Retrieve user details by ID
     *
     * @param id The unique ID of the user (required)
     * @return User details retrieved successfully (status code 200)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Retrieve user details by ID",
        tags = { "User Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User details retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserResponse> getUserById(
        @Parameter(name = "id", description = "The unique ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"role\", \"gender\" : \"MALE\", \"mobileNumber\" : \"mobileNumber\", \"fullName\" : \"fullName\", \"id\" : 0, \"userName\" : \"userName\", \"email\" : \"email\", \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{id} : Update an existing user
     *
     * @param id The unique ID of the user (required)
     * @param userUpdate Updated details of the user (required)
     * @return User updated successfully (status code 200)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update an existing user",
        tags = { "User Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> updateUser(
        @Parameter(name = "id", description = "The unique ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UserUpdate", description = "Updated details of the user", required = true) @Valid @RequestBody UserUpdate userUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"User Updated successfully.\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /users/{id}/passwordupdate : Update password  of an existing user
     *
     * @param id The unique ID of the user (required)
     * @param userUpdatePassword Updated Password of the user (required)
     * @return User Password updated successfully (status code 200)
     */
    @Operation(
        operationId = "updateUserPassword",
        summary = "Update password  of an existing user",
        tags = { "User Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User Password updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{id}/passwordupdate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> updateUserPassword(
        @Parameter(name = "id", description = "The unique ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UserUpdatePassword", description = "Updated Password of the user", required = true) @Valid @RequestBody UserUpdatePassword userUpdatePassword
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"User Password Updated successfully.\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
