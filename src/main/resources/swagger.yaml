openapi: 3.1.0
info:
  title: User Management API
  description: API specification for managing users in Zag Systems, providing endpoints for user creation, retrieval, update, and deletion.
  version: 1.0.0
servers:
  - url: 'http://localhost:8000/'
    description: Local development server

paths:
  /users:
    post:
      tags:
        - User Management
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: Details of the new user to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
#        '400':
#          $ref: '#/components/responses/BadRequest'
#        '500':
#          $ref: '#/components/responses/InternalError'
    get:
      tags:
        - User Management
      summary: Retrieve all users
      operationId: getAllUsers
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
#        '500':
#          $ref: '#/components/responses/InternalError'

  /users/{id}:
    get:
      tags:
        - User Management
      summary: Retrieve user details by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
#        '404':
#          $ref: '#/components/responses/NotFound'
#        '500':
#          $ref: '#/components/responses/InternalError'

    put:
      tags:
        - User Management
      summary: Update an existing user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the user
          schema:
            type: integer
      requestBody:
        description: Updated details of the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
#        '400':
#          $ref: '#/components/responses/BadRequest'
#        '404':
#          $ref: '#/components/responses/NotFound'
#        '500':
#          $ref: '#/components/responses/InternalError'

    delete:
      tags:
        - User Management
      summary: Delete a user by ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "User deleted successfully."
#        '404':
#          $ref: '#/components/responses/NotFound'
#        '500':
#          $ref: '#/components/responses/InternalError'

components:
  schemas:
    UserCreate:
      type: object
      required:
        - userName
        - password
        - email
        - fullName
        - mobileNumber
        - role
        - gender
        - status
      properties:
        userName:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password for the user
        email:
          type: string
          description: The email address of the user
          format: email
        fullName:
          type: string
          description: The full name of the user
        mobileNumber:
          type: string
          description: The mobile number of the user
        role:
          type: string
          description: The role assigned to the user
        gender:
          type: string
          description: The gender of the user (e.g., Male, Female, Other)
        status:
          type: string
          description: The status of the user account
          enum:
            - ACTIVE
            - INACTIVE

    UserUpdate:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: The unique ID of the user
        userName:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email address of the user
          format: email
        password:
          type: string
          description: The updated password for the user
        mobileNumber:
          type: string
          description: The updated mobile number of the user
        role:
          type: string
          description: The updated role of the user
        status:
          type: string
          description: The updated status of the user account
          enum:
            - ACTIVE
            - INACTIVE

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description: The unique ID of the user
        userName:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email address of the user
          format: email
        fullName:
          type: string
          description: The full name of the user
        mobileNumber:
          type: string
          description: The mobile number of the user
        role:
          type: string
          description: The role of the user
        gender:
          type: string
          description: The gender of the user
        status:
          type: string
          description: The account status of the user
          enum:
            - ACTIVE
            - INACTIVE

#  responses:
#    BadRequest:
#      description: Invalid input data provided
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              error:
#                type: string
#                example: "Invalid input data."
#    NotFound:
#      description: Resource not found
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              error:
#                type: string
#                example: "User not found."
#    InternalError:
#      description: Internal server error
#      content:
#        application/json:
#          schema:
#            type: object
#            properties:
#              error:
#                type: string
#                example: "An unexpected error occurred."
