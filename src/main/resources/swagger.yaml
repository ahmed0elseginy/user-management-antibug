openapi: 3.0.0
info:
  title: User Management API
  description: API specification for managing users in Zag Systems, providing endpoints for user creation, retrieval, update, deletion, and message publishing.
  version: 1.0.0
servers:
  - url: 'http://localhost:8000/'
    description: Local development server

paths:
  /publishMessage:
    post:
      summary: Publish a message
      operationId: publishMessage
      tags:
        - Messaging
      requestBody:
        description: Message details to be published
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishMessageDto'
      responses:
        '200':
          description: Message published successfully
          content:
            application/json:
              schema:
                type: string
                example: "Sent"
        '400':
          description: Invalid input

  /users:
    post:
      tags:
        - User Management
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: Details of the new user to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
            examples:
              example1:
                value:
                  userName: "JohnDoe"
                  password: "John12"
                  email: "john.doe@example.com"
                  fullName: "John Doe"
                  mobileNumber: "01234567890"
                  role: "USER"
                  gender: "MALE"
                  status: "ACTIVE"
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: string
                example: "User added successfully."
        '400':
          description: Invalid input

    get:
      tags:
        - User Management
      summary: Retrieve all users
      operationId: getAllUsers
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDto'

  /users/{id}:
    get:
      tags:
        - User Management
      summary: Retrieve user details by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '404':
          description: User not found

    put:
      tags:
        - User Management
      summary: Update an existing user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the user
          schema:
            type: integer
      requestBody:
        description: Updated details of the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDto'
            examples:
              example1:
                value:
                  userName: "JohnDoeUpdated"
                  email: "john.updated@example.com"
                  mobileNumber: "01234567891"
                  role: "ADMIN"
                  password: "John12"
                  status: "INACTIVE"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "User updated successfully."
        '400':
          description: Invalid input
        '404':
          description: User not found

    delete:
      tags:
        - User Management
      summary: Delete a user by ID
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the user to delete
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example: User deleted successfully
        '404':
          description: User not found
          content:
            text/plain:
              schema:
                type: string
                example: User not found

  /users/{id}/updatePassword:
    put:
      tags:
        - User Management
      summary: Update password for a user
      operationId: updatePassword
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the user whose password is to be updated
          schema:
            type: integer
      requestBody:
        description: Request body for updating the password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdatePasswordDto'
            examples:
              example1:
                value:
                  oldPassword: "John12"
                  newPassword: "Johnsd12"
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "Password updated successfully."
        '400':
          description: Invalid input
        '404':
          description: User not found

components:
  schemas:
    PublishMessageDto:
      type: object
      required:
        - source
        - message
      properties:
        source:
          type: string
          description: The source of the message
          example: "Admin"
        message:
          type: string
          description: The message content
          example: "This is a test message."
    UserCreateDto:
      type: object
      required:
        - userName
        - password
        - email
        - fullName
        - mobileNumber
        - role
        - gender
        - status
      properties:
        userName:
          type: string
          description: The username of the user
          pattern: "^[A-Za-z][A-Za-z0-9]*$"
          example: "JohnDoe"
        password:
          type: string
          pattern: "^\\w+\\d{2}$"
          minLength: 5
          maxLength: 10
          example: "John12"
        email:
          type: string
          description: The email address of the user
          format: email
          example: "john.doe@example.com"
        fullName:
          type: string
          description: The full name of the user
          pattern: "^[A-Za-z ]+$"
          example: "John Doe"
        mobileNumber:
          type: string
          description: The mobile number of the user (11 digits)
          pattern: "^\\d{11}$"
          example: "01234567890"
        role:
          type: string
          description: The role assigned to the user
          example: "USER"
        gender:
          type: string
          description: The gender of the user
          pattern: "^(MALE|FEMALE)$"
          example: "MALE"
        status:
          type: string
          description: The status of the user account
          pattern: "^(ACTIVE|INACTIVE)$"
          example: "ACTIVE"
    UserResponseDto:
      type: object
      properties:
        id:
          type: integer
          description: The unique ID of the user
          example: 1
        userName:
          type: string
          description: The username of the user
          example: "JohnDoe"
        email:
          type: string
          description: The email address of the user
          format: email
          example: "john.doe@example.com"
        fullName:
          type: string
          description: The full name of the user
          example: "John Doe"
        mobileNumber:
          type: string
          description: The mobile number of the user
          example: "01234567890"
        role:
          type: string
          description: The role of the user
          example: "USER"
        gender:
          type: string
          description: The gender of the user
          example: "MALE"
        status:
          type: string
          description: The account status of the user
          example: "ACTIVE"
    UserUpdateDto:
      type: object
      properties:
        userName:
          type: string
          description: The username of the user
          pattern: "^[A-Za-z][A-Za-z0-9]*$"
          example: "JohnDoeUpdated"
        email:
          type: string
          description: The email address of the user
          format: email
          example: "john.updated@example.com"
        mobileNumber:
          type: string
          description: The mobile number of the user
          pattern: "^\\d{11}$"
          example: "01234567891"
        role:
          type: string
          description: The role assigned to the user
          example: "ADMIN"
        password:
          type: string
          pattern: "^\\w+\\d{2}$"
          minLength: 5
          maxLength: 10
          example: "John12"
        status:
          type: string
          description: The status of the user account
          pattern: "^(ACTIVE|INACTIVE)$"
          example: "INACTIVE"
    UserUpdatePasswordDto:
      type: object
      required:
        - oldPassword
        - newPassword
      properties:
        oldPassword:
          type: string
          description: The old password for the user
          example: "John12"
        newPassword:
          type: string
          pattern: "^\\w+\\d{2}$"
          minLength: 5
          maxLength: 10
          example: "Johnsd12"
